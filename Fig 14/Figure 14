library(MASS)
library(matrixStats)
#############################
sigma=c(1,1/16,0.5,sqrt(0.5),sqrt(2),16)  #this varied
#############################
N_sim=1000000

#it counts the BF-distributed values in each partition for theta
fulled=matrix(data=rep(1,100*length(sigma)),nrow=100,ncol=length(sigma))

#the BF-distributed values in each partition for theta
res=array(data=NA,dim=c(N_sim,100,length(sigma)))

df1=6  #degrees of freedom
df2=12
N=(df1+1) #size of first sample
M=(df2+1)  #size of second sample


theta=rep(0,length(sigma)) #the angle in the formula for BF distribution

T1=matrix(data=NA, nrow=N_sim, ncol=length(sigma)) # The student-distributed varible 
#generated using the normal-distributed vatiables with standard deviation sigma

while (min(fulled)<N_sim*0.9) #while there are not enough values of BF-distributed variable 
                              #in each bin for Theta
{
vect2=matrix(data=rnorm(N_sim*(df2+1)),ncol=N_sim, nrow=M) #simulate the second sample
vars2=colVars(vect2)

for (ii in 1:length(sigma))
  #sumulate the first sample
 {  vect1=matrix(data=rnorm(N_sim*(df1+1),0,sigma[ii]),ncol=N_sim, nrow=N)
    vars1=colVars(vect1)
    theta=atan(sqrt(vars1*M/vars2/N))
    theta2=pi/2-theta
    T1=colMeans(vect1)*sqrt(N)/sqrt(colVars(vect1))
    T2=colMeans(vect2)*sqrt(M)/sqrt(colVars(vect2))
  #fill the bins, i.e. the partitions for Theta
    for (j in 1:100)
    {
      ind=which((theta>(j-1)*pi/200)&(theta<(j)*pi/200))
      BF=T2[ind]*cos(theta[ind])-T1[ind]*sin(theta[ind])
      if ((length(BF)>0)&&(length(BF)<(N_sim-fulled[j,ii])))
        {res[fulled[j,ii]:(length(BF)+fulled[j,ii]-1),j,ii]=BF
          fulled[j,ii]=fulled[j,ii]+length(BF) 
        }
     
    }
 }
}

#the matrix for 95% quantiles
test=matrix(data=NA, nrow=100, ncol=length(sigma))

#compute the quantiles
for (ii in 1:length(sigma))
for (i in 1:100) test[i,ii]=quantile(sort(res[,i,ii]),0.95)

#plot the results
angle=(1:100)*pi/200
plot(angle,test[,1],ylim=c(1.5,2.1),xlim=c(0.1,1.6), ylab="")
par ( new=TRUE)
plot(angle,test[,2],col='blue',xlim=c(0.1,1.6),ylim=c(1.5,2.1), ylab="")
par ( new=TRUE)
plot(angle,test[,3],col='red',xlim=c(0.1,1.6),ylim=c(1.5,2.1), ylab="")
par ( new=TRUE)
plot(angle,test[,4],col='brown',xlim=c(0.1,1.6),ylim=c(1.5,2.1), ylab="")
par ( new=TRUE)
plot(angle,test[,5],col='darkgreen',xlim=c(0.1,1.6),ylim=c(1.5,2.1), ylab="")
par ( new=TRUE)
plot(angle,test[,6],col='gold4',xlim=c(0.1,1.6),ylim=c(1.5,2.1), ylab="")
legend("bottomleft",legend=sigma^2,col=c('black', 'blue','red',  'brown','darkgreen','gold4'), title="var(X)/var(Y)",pch=1)


